<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>React on Meisinger Two</title><link>https://meisinger.github.io/tags/react/</link><description>Recent content in React on Meisinger Two</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 06 Mar 2020 17:12:51 +0000</lastBuildDate><atom:link href="https://meisinger.github.io/tags/react/index.xml" rel="self" type="application/rss+xml"/><item><title>The Ref</title><link>https://meisinger.github.io/post/2020-03-06-the-ref-hook/</link><pubDate>Fri, 06 Mar 2020 17:12:51 +0000</pubDate><guid>https://meisinger.github.io/post/2020-03-06-the-ref-hook/</guid><description>&lt;p>No. Not the movie. The &lt;code>hook&lt;/code>.&lt;/p></description></item><item><title>Bending Hooks to Your Will</title><link>https://meisinger.github.io/post/2020-03-04-creating-hooks/</link><pubDate>Wed, 04 Mar 2020 18:14:28 +0000</pubDate><guid>https://meisinger.github.io/post/2020-03-04-creating-hooks/</guid><description>&lt;p>So the &lt;code>Hook&lt;/code> revolution is upon us and we have learned a little bit about &lt;code>useState&lt;/code> and &lt;code>useEffect&lt;/code>.
With these two hooks alone we can get a lot of stuff done.&lt;/p></description></item><item><title>Getting the Hook</title><link>https://meisinger.github.io/post/2020-03-01-venture-into-the-unknown/</link><pubDate>Sun, 01 Mar 2020 19:04:17 +0000</pubDate><guid>https://meisinger.github.io/post/2020-03-01-venture-into-the-unknown/</guid><description>&lt;p>If you have been ignoring the Functional Component aspect of React and only working with Class Components, you might have
missed the &lt;code>Hook&lt;/code> revolution.&lt;/p>
&lt;p>One of the reasons why I focused on Class Components, and payed little attention to Fuctional Components, was the ability
to &amp;ldquo;hook&amp;rdquo; into the &lt;code>Component Lifecycle&lt;/code>. Most of the time I was living in three methods: &lt;code>constructor&lt;/code>, &lt;code>componentDidMount&lt;/code> and
&lt;code>componentWillUnmount&lt;/code> methods. Setting up my state in the &lt;code>constructor&lt;/code>, making all of my subscription calls in
&lt;code>componentDidMount&lt;/code> and cleaning everything up in &lt;code>componentWillUnmount&lt;/code>.&lt;/p></description></item></channel></rss>